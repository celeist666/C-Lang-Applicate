#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct {
	int* queue;
	int  front, rear;
} QueueType;
//
// 초기화 함수
void init(QueueType *q)
{
	q->front = q->rear = 0;
}
// 공백 상태 검출 함수
int is_empty(QueueType *q)
{
	return (q->front == q->rear);
}
// 포화 상태 검출 함수
int is_full(QueueType *q, int size)
{
	return ((q->rear + 1) == q->front);
}

// 포화 상태 검출 함수
int will_full(QueueType *q, int size)
{
	return (((q->rear + 1) % size + +1) == q->front);
}
// 삽입 함수
void enqueue(QueueType *q, int item, int size)
{
	if (is_full(q, size))
		printf("큐가 포화상태입니다\n");
	q->rear = (q->rear + 1);
	q->queue[q->rear] = item;
}
// 삭제 함수
int dequeue(QueueType *q, int size)
{
	if (is_empty(q))
		printf("큐가 공백상태입니다\n");
	q->front = (q->front + 1);
	return q->queue[q->front];
}
// 주 함수
void main(){
	QueueType q;
	int size = 20, ipt = 0, flag = 1;
	init(&q);

	while (ipt<100)
	{
		printf("1 ~ 몇까지의 소수를 출력할지 입력하시오 : ");
		scanf("%d", &ipt);
		if (ipt<100)
		{
			printf("100이상의 수를 입력하시오");
		}
	}

	q.queue = (int*)malloc(sizeof(int) * size);

	for (int i = 1; i <= ipt; i++) {
		if (i >= 10) {
			for (int j = 2; j <= (int)sqrt(i); j++)
			{
				if (i%j == 0)
				{
					flag++;
					break;
				}
			}
		}

		else
		{
			enqueue(&q, i, size);
			continue;
		}

		if (flag == 0)
		{
			printf("%d는 소수이므로 dequeue : %d\n", i, dequeue(&q, size));
		}
		else
		{
			if (is_full(&q, size))
			{
				size += 5;
				q.queue = (int*)realloc(q.queue, sizeof(int) * size);
			}
			enqueue(&q, i, size);
			printf("%d\n", i);
			flag = 0;
		}
	}

	free(q.queue);
}